<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <!-- 
 	명령을 전달하기 위한 파일 
 	namespace : 영역을 부르는 별칭
 	parameterType : 이 명령을 실행하기 위해 필요한 데이터의 형태
 	resultType : 기대되는 결과물의 형태 (목록이든 아니든 dto 형태로 표기)
 	
 	부등호(<,>,=)를 쓰고 싶다면 
 	<![CDATA[
 	이곳에 명령어를 넣는다
 	]]> 
	
	형태에 따라 파라미터를 다르게 설정할 수 있다
	- #은 형태를 추론해 자동으로 따옴표 설정 및 인코딩 처리를 수행
	- $는 값을 있는 그대로 출력하는 명령이므로 주로 "항목"에 사용
		-$의 경우 SQL Injection 이라는 해킹 공격에 매우 취약하므로 사용에 주의
 -->
 
 <mapper namespace="admin"> <!-- 이건 꼭 있어야한다 -->
 	<!-- 로그인을 위한 아이디 불러오기 -->
 	<select id="getId" parameterType="adminDto" resultType="adminDto">
 		select * from admin where admin_id = #{admin_id}
 	</select>
 	
 	<!-- 관리자 가입시키기 -->
	<insert id="insert" parameterType="adminDto">
		insert into admin values(
							admin_seq.nextval,	
							#{admin_id},
							#{admin_pw},
							#{admin_name},
							#{admin_email},
							'일반관리자',
							sysdate,
							sysdate)
	</insert>
	
	<!-- 최종로그인 일시 변동 -->
	<update id="lastLogin" parameterType="adminDto">
		update admin set admin_last_login = sysdate
	</update>
	
	<!-- 관리자 리스트 뽑아오기 -->
	<select id="getList" resultType="adminDto">
<!-- 		select * from admin where admin_grade = '일반관리자' -->
		select * from(
			select rownum rn, A.* from(
				select * from admin where admin_grade = '일반관리자' order by admin_no desc
			)A
		)where rn between #{startList} and #{listSize}
	</select>
	
	<select id="getBoardListCnt" resultType="int">
		select 
			count(*) 
		from 
			admin
	</select>
		
	<!-- 총 관리자 갯수 출력 -->
	<select id="countBoard" resultType="int">
		select count(*) from admin where admin_grade ='일반관리자'
	</select>	
		
	<select id="selectBoard" parameterType="paging" resultType="adminDto">
			select * from(
			select rownum rn, A.* from(
				select * from admin where admin_grade = '일반관리자' order by admin_no desc
			)A
		)where rn between #{start} and #{finish}
	</select>	
	
	<!-- 관리자 삭제 -->
	<delete id="delete" parameterType="adminDto">
		delete admin where admin_no = #{admin_no}
	</delete>
	
	<!-- 판매자 리스트 불러오기 -->
	<select id="sellerGetList" parameterType="paging" resultType="sellerDto">
		select * from(
			select rownum rn, A.* from(
				select * from seller order by seller_no desc
			)A
		)where rn between #{start} and #{finish}
	</select>
	
	<!-- 판매자 단일 조회 -->
	<select id="sellerGetOne" parameterType="sellerDto" resultType="sellerDto">
		select * from seller where seller_no = #{seller_no}
	</select>
	
	<!-- 판매자 삭제 -->
	<delete id="sellerDelete" parameterType="sellerDto">
		delete seller where seller_no = #{seller_no}
	</delete>
	
	<!-- 판매자 목록 총 갯수 가져오기 -->
	<select id="sellerCount" resultType="int">
		select count(*) from seller 
	</select>	
	
	<!-- 카테고리 리스트 불러오기 -->
	<select id="sellerGetCategoryList" parameterType="paging" resultType="categoryDto">
		select * from(
			select rownum rn, A.* from(
				select * from category 
				order by category_large desc,
				category_middle, 
				category_small
			)A
		)where rn between #{start} and #{finish}
	</select>
	<!-- 카테고리 목록 총 갯수 가져오기 -->
	<select id="categoryCount" resultType="int">
		select count(*) from category 
	</select>	
	<!-- 카테고리 등록하기 -->
	<insert id="categoryInsert" parameterType="categoryDto">
		insert into category values(
					category_seq.nextval,
					#{category_large}, 
					#{category_middle}, 
					#{category_small})
	</insert>
	<!-- 카테고리 수정하기 -->
	<update id="categoryUpdate" parameterType="categoryDto">
		update category set 
			category_large = #{category_large},
			category_middle = #{category_middle},
			category_small = #{category_small}
		where
			category_no = #{category_no}
			
	</update>
	<!-- 카테고리 삭제하기 -->
	<delete id="categoryDelete" parameterType="int">
		delete category where category_no = #{category_no}
	</delete>
	
	<!-- 회원 리스트 -->
	<select id="memberGetList" parameterType="Paging" resultType="memberDto">
		select * from(
			select rownum rn, A.* from(
				select * from member 
				order by member_no desc
			)A
		)where rn between #{start} and #{finish}
	</select>
	
	<!-- 회원 단일 조회 -->
	<select id="memberGetOne" parameterType="memberDto" resultType="memberDto">
		select * from member where member_no = #{member_no}
	</select>
	
	<!-- 회원 삭제하기 -->
	<delete id="memberDelete" parameterType="memberDto">
		delete member where member_no = #{member_no}
	</delete>	
	
	<!-- 회원 총 갯수 -->
	<select id="memberCount" resultType="int">
		select count(*) from member
	</select>
	
	<!-- 수수료 리스트 -->
	<select id="premiumGetList" resultType="premiumDto">
		select * from premium order by premium_price desc
	</select>
	
	<!-- 수수료 추가 -->
	<insert id="premiumInsert" parameterType="premiumDto">
		insert into premium values(premium_seq.nextval, #{premium_price}, #{premium_rate})
	</insert>
	
	<!-- 수수료 변경 -->
	<update id="premiumUpdate" parameterType="premiumDto">
		update premium 
			set 
				premium_price = #{premium_price}, 
				premium_rate = #{premium_rate}
			where
				premium_no = #{premium_no}
	</update>
	
	<!-- 수수료 삭제 -->
	<delete id="premiumDelete" parameterType="premiumDto">
		delete premium where premium_no = #{premium_no}
	</delete>
	
	<!-- 관리문의게시판 리스트 뽑기 -->
	<select id="adminQnaGetList" resultType="adminQnaDto">
		select * from(
			select rownum rn, A.* from (
				select * from admin_qna 
				connect by prior admin_qna_no=super_no 
				start with super_no is null 
				order siblings by group_no desc, admin_qna_no asc
			)A
		) where rn between #{start} and #{finish}
	</select>
	
	<!-- 관리문의게시판 총 갯수 구하기 -->
	<select id="adminQnaCount" resultType="int">
		select count(*) from admin_qna
	</select>
	
	<!-- 관리문의게시판 글 상세보기 1개 뽑기 -->
	<select id="adminQnaGetOne" parameterType="adminQnaDto" resultType="adminQnaDto">
		select * from admin_qna where admin_qna_no = #{admin_qna_no}
	</select>
	
	<!-- 관리문의게시판 새글쓰기 -->
	<insert id="adminQnaNewWrite" parameterType="adminQnaDto">
		insert into admin_qna(
			admin_qna_no,
			admin_no,
			admin_qna_content,
			admin_qna_title,
			admin_qna_writer,
			admin_qna_date,
			admin_qna_head,
			group_no,
			admin_qna_usertype
		) values(
			admin_qna_seq.nextval, 
			#{admin_no},
			#{admin_qna_content},
			#{admin_qna_title},
			#{admin_qna_writer},
			sysdate,
			#{admin_qna_head},
			admin_qna_seq.nextval,
			'관리자'
		)
	</insert>
	
	<!-- 관리문의게시판 답글쓰기 -->
	<insert id="adminQnaSecondWrite" parameterType="adminQnaDto">
		insert into admin_qna(
			admin_qna_no,
			admin_no,
			admin_qna_content,
			admin_qna_title,
			admin_qna_writer,
			admin_qna_date,
			admin_qna_head,
			group_no,
			super_no,
			admin_qna_usertype
		) values(
			admin_qna_seq.nextval, 
			#{admin_no},
			#{admin_qna_content},
			#{admin_qna_title},
			#{admin_qna_writer},
			sysdate,
			#{admin_qna_head},
			#{group_no},
			#{super_no},
			'관리자'
		)
	</insert>
	
	<!-- qna 글 수정 관리자용 -->
	<update id="qnaBoardUpdate"  parameterType="adminQnaDto">
		update admin_qna 
			set 
				admin_qna_title = #{admin_qna_title},
				admin_qna_content = #{admin_qna_content},
				admin_qna_date = sysdate
			where
				admin_qna_no = #{admin_qna_no}
	</update>
	
	<!-- qna글 삭제 -->
	<delete id="qnaBoardDelete" parameterType="adminQnaDto">
		delete admin_qna where admin_qna_no = #{admin_qna_no}
	</delete>
	
	<!-- 회원 개인 포인트 총합 -->
	<select id="pointSumMember" parameterType="point" resultType="int">
		select sum(member_point_change) from member_point where member_no = #{member_no}
	</select>
	
	<!-- 회원 개인 포인트 목록 갯수 구해오기 -->
	<select id="pointMemberCount" parameterType="point" resultType="int">
		select count(*) from member_point where member_no = #{member_no}
	</select>
	
	<!-- 회원 포인트 조회 --> 
	<select id="pointMember" parameterType="paging" resultType="point">
		select * from(
			select rownum rn, A.* from(
				select 
						*
				from 
						member_point
				where member_no = #{member_no}
				order by member_point_date
			)A
		)where rn between #{start} and #{finish}
	</select>
	
	<!-- 회원 포인트 삭제 -->
	<delete id="pointDelete" parameterType="int">
		delete member_point where member_point_no = #{member_point_no}
	</delete>
	
	<!-- 회원 포인트 추가 -->
	<insert id="pointRegist" parameterType="point">
		insert into member_point 
			values(
				member_point_seq.nextval, 
				#{member_point_status},
				sysdate,
				#{member_point_limit},
				#{member_point_change},
				#{member_point_content},
				#{member_no}
				)
	</insert>
	
	<!-- resultMap을 써보자... -->
	<resultMap  id="base" type="base">
		<result property="goods_no" column="goods_no"/>
		<result property="seller_no" column="seller_no"/>
		<result property="goods_name" column="goods_name"/>	
		<result property="goods_price" column="goods_price"/>	
		<result property="goods_discount_price" column="goods_discount_price"/>	
		<result property="goods_discount_start" column="goods_discount_start"/>	
		<result property="goods_discount_finish" column="goods_discount_finish"/>	
		<result property="goods_stock" column="goods_stock"/>	
		<result property="goods_status" column="goods_status"/>	
		<result property="goods_content" column="goods_content"/>	
		<result property="category_no" column="category_no"/>	
	</resultMap>
	
	<!-- 상품 불러오기 -->
	<select id=""></select>
 </mapper> 
	
 