<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
 <!-- 
 	명령을 전달하기 위한 파일 
 	namespace : 영역을 부르는 별칭
 	parameterType : 이 명령을 실행하기 위해 필요한 데이터의 형태
 	resultType : 기대되는 결과물의 형태 (목록이든 아니든 dto 형태로 표기)
 	
 	부등호(<,>,=)를 쓰고 싶다면 
 	<![CDATA[
 	이곳에 명령어를 넣는다
 	]]> 
	
	형태에 따라 파라미터를 다르게 설정할 수 있다
	- #은 형태를 추론해 자동으로 따옴표 설정 및 인코딩 처리를 수행
	- $는 값을 있는 그대로 출력하는 명령이므로 주로 "항목"에 사용
		-$의 경우 SQL Injection 이라는 해킹 공격에 매우 취약하므로 사용에 주의
 -->
 
 <mapper namespace="admin"> <!-- 이건 꼭 있어야한다 -->
 	<!-- 로그인을 위한 아이디 불러오기 -->
 	<select id="getId" parameterType="adminDto" resultType="adminDto">
 		select * from admin where admin_id = #{admin_id}
 	</select>
 	
 	<!-- 관리자 아이디 체크 -->
 	<select id="idcheck" parameterType="string" resultType="int">
 		select count(*) from admin where admin_id = #{admin_id}
 	</select>
 	
 	<!-- 관리자 가입시키기 -->
	<insert id="insert" parameterType="adminDto">
		insert into admin values(
							admin_seq.nextval,	
							#{admin_id},
							#{admin_pw},
							#{admin_name},
							#{admin_email},
							'일반관리자',
							sysdate,
							sysdate)
	</insert>
	
	<!-- 최종로그인 일시 변동 -->
	<update id="lastLogin" parameterType="adminDto">
		update admin set admin_last_login = sysdate
	</update>
	
	<!-- 관리자 리스트 뽑아오기 -->
	<select id="getList" resultType="adminDto">
<!-- 		select * from admin where admin_grade = '일반관리자' -->
		select * from(
			select rownum rn, A.* from(
				select * from admin where admin_grade = '일반관리자' order by admin_no desc
			)A
		)where rn between #{startList} and #{listSize}
	</select>
	
	<select id="getBoardListCnt" resultType="int">
		select 
			count(*) 
		from 
			admin
	</select>
		
	<!-- 총 관리자 갯수 출력 -->
	<select id="countBoard" resultType="int">
		select count(*) from admin where admin_grade ='일반관리자'
	</select>	
		
	<select id="selectBoard" parameterType="paging" resultType="adminDto">
			select * from(
			select rownum rn, A.* from(
				select * from admin where admin_grade = '일반관리자' order by admin_no desc
			)A
		)where rn between #{start} and #{finish}
	</select>	
	
	<!-- 관리자 삭제 -->
	<delete id="delete" parameterType="adminDto">
		delete admin where admin_no = #{admin_no}
	</delete>
	
	<!-- 관리자 자기정보 -->
	<select id="amindMy" parameterType="string" resultType="adminDto" >
		select * from admin where admin_id = #{admin_id}
	</select>
	
	<!-- 관리자 자기비밀번호 변경 위한 비밀번호 확인 -->
	<select id="adminCheckPw" parameterType="int" resultType="adminDto">
		select * from admin where admin_no = #{admin_no}
	</select>
	
	<!-- 관리자 비밀번호 변경하기 관리자가 자기 아이디 하는 것 -->
	<select id="adminChangePw" parameterType="adminDto">
		update admin set 
			admin_pw = #{admin_pw}
		where 
			admin_no = #{admin_no}
	</select>
	
	<!-- 판매자 리스트 불러오기 -->
	<select id="sellerGetList" parameterType="paging" resultType="blockSellerDto">
		select * from(
			select rownum rn, A.* from(
				select 
					a.seller_no, a.seller_id, a.seller_name, a.seller_email, a.seller_phone, a.seller_birth, a.seller_addr_post, a.seller_addr_basic,
					a.seller_addr_extra, a.seller_store_name, a.seller_store_phone, a.seller_store_fax, seller_join_date, seller_last_login, a.seller_agree_date, a.seller_cid, a.seller_bank_code,
					a.seller_bank_account, a.seller_bank_username, a.seller_bank_birth, a.seller_grade, b.block_no
				from seller a left outer join block b on a.seller_no = b.seller_no 
				<choose>
					<when test='key == "seller_id"'>
						where seller_id like '%'||#{search}||'%' 
					</when>
					<when test='key == "seller_grade"'>
						where seller_grade like '%'||#{search}||'%' 
					</when>
				</choose>
				order by seller_no desc 
			)A
		)where rn between #{start} and #{finish}
	</select>
	
	<!-- 판매자 단일 조회 -->
	<select id="sellerGetOne" parameterType="sellerDto" resultType="sellerDto">
		select * from seller where seller_no = #{seller_no}
	</select>
	
	<!-- 판매자 비밀번호 변경 -->
	<update id="resetSellerPw" parameterType="sellerDto">
		update seller 
			set 
				seller_pw = #{seller_pw}
			where 
				seller_no = #{seller_no}
	</update>
	
	<!-- 판매자 삭제 -->
	<delete id="sellerDelete" parameterType="sellerDto">
		delete seller where seller_no = #{seller_no}
	</delete>
	
	<!-- 판매자 목록 총 갯수 가져오기 -->
	<select id="sellerCount" resultType="int">
		select count(*) from seller 
	</select>	
	
	<!-- 판매자 아이디 검색 카운트 -->
	<select id="sellerIdCount" parameterType="String" resultType="int">
		select count(*) from seller where seller_id like '%'||#{seller_id}||'%'
	</select>
	
	<!-- 판매자 등급 검색 카운트 -->
	<select id="sellerGradeCount" parameterType="String" resultType="int">
		select count(*) from seller where seller_grade like '%'||#{seller_grade}||'%'
	</select>
	
	<!-- 카테고리 리스트 불러오기 -->
	<select id="sellerGetCategoryList" parameterType="paging" resultType="categoryDto">
		select * from(
			select rownum rn, A.* from(
				select * from category 
				order by category_large desc,
				category_middle, 
				category_small
			)A
		)where rn between #{start} and #{finish}
	</select>
	
	<!-- 카테고리 대 불러오기 -->
	<select id="categoryItemBig" resultType="categoryDto">
		select category_large from category group by category_large
	</select>
	<!-- 카테고리 중 불러오기 -->
	<select id="categoryItemMiddle" resultType="categoryDto">
		select category_middle from category group by category_middle
	</select>
	<!-- 카테고리 소 불러오기 -->
	<select id="categoryItemSmall" resultType="categoryDto">
		select category_small from category group by category_small
	</select>
	
	<!-- 카테고리 목록 총 갯수 가져오기 -->
	<select id="categoryCount" resultType="int">
		select count(*) from category 
	</select>	
	<!-- 카테고리 등록하기 -->
	<insert id="categoryInsert" parameterType="categoryDto">
		insert into category values(
					category_seq.nextval,
					#{category_large}, 
					#{category_middle}, 
					#{category_small})
	</insert>
	<!-- 카테고리 수정하기 -->
	<update id="categoryUpdate" parameterType="categoryDto">
		update category set 
			category_large = #{category_large},
			category_middle = #{category_middle},
			category_small = #{category_small}
		where
			category_no = #{category_no}
			
	</update>
	<!-- 카테고리 삭제하기 -->
	<delete id="categoryDelete" parameterType="int">
		delete category where category_no = #{category_no}
	</delete>
	
	<!-- 회원 비밀번호 리셋 -->
	<update id="resetPw" parameterType="memberDto">
		update member 
			set
				member_pw = #{member_pw}
			where
				member_no = #{member_no}
	</update>
	
	<!-- 회원 리스트 -->
	<select id="memberGetList" parameterType="Paging" resultType="blockMemberDto">
		select * from(
			select rownum rn, A.* from(
				select a.member_no, a.member_id, a.member_name, a.member_email, a.member_phone, a.member_birth, a.member_join_date, a.member_last_login,
				    a.member_agree_date, a.member_grade, b.block_no
				from member a left outer join block b on a.member_no = b.member_no
				<choose>
					<when test='key == "member_id"'>
						where member_id like '%'||#{search}||'%' 
					</when>
					<when test='key == "member_grade"'>
						where member_grade like '%'||#{search}||'%' 
					</when>
					<when test='key == "member_name"'>
						where member_name like '%'||#{search}||'%' 
					</when>
				</choose>
				order by a.member_no desc
			)A
		)where rn between #{start} and #{finish}
	</select>
	
	<!-- 회원 단일 조회 -->
	<select id="memberGetOne" parameterType="memberDto" resultType="memberDto">
		select * from member where member_no = #{member_no}
	</select>
	
	<!-- 회원 삭제하기 -->
	<delete id="memberDelete" parameterType="memberDto">
		delete member where member_no = #{member_no}
	</delete>	
	
	<!-- 회원 총 갯수 -->
	<select id="memberCount" resultType="int">
		select count(*) from member
	</select>
	
	<!-- 오늘 가입한 회원 -->
	<select id="registTodayMember" resultType="int">
		select count(*) from member where member_join_date like '%'||to_date(sysdate, 'YYYY-MM-DD')||'%'
	</select>
	
	<!-- 오늘 가입한 판매자 -->
	<select id="registTodaySeller" resultType="int">
		select count(*) from seller where seller_join_date like '%'||to_date(sysdate, 'YYYY-MM-DD')||'%'
	</select>
	
	<!-- 회원 아이디 총 갯수 -->
	<select id="memberIdCount" parameterType="String" resultType="int">
		select count(*) from member where member_id like'%'||#{member_id}||'%'
	</select>
	
	<!-- 회원 이름 총 갯수 -->
	<select id="memberNameCount" parameterType="String" resultType="int">
		select count(*) from member where member_name like'%'||#{member_name}||'%'
	</select>
	
	<!-- 회원 등급 총 갯수 -->
	<select id="memberGradeCount" parameterType="String" resultType="int">
		select count(*) from member where member_grade like'%'||#{member_grade}||'%'
	</select>
	
	<!-- 수수료 리스트 -->
	<select id="premiumGetList" resultType="premiumDto">
		select * from premium order by premium_price desc
	</select>
	
	<!-- 수수료 추가 -->
	<insert id="premiumInsert" parameterType="premiumDto">
		insert into premium values(premium_seq.nextval, #{premium_price}, #{premium_rate})
	</insert>
	
	<!-- 수수료 변경 -->
	<update id="premiumUpdate" parameterType="premiumDto">
		update premium 
			set 
				premium_price = #{premium_price}, 
				premium_rate = #{premium_rate}
			where
				premium_no = #{premium_no}
	</update>
	
	<!-- 수수료 삭제 -->
	<delete id="premiumDelete" parameterType="premiumDto">
		delete premium where premium_no = #{premium_no}
	</delete>
	
	<!-- 관리문의게시판 리스트 뽑기 -->
	<select id="adminQnaGetList" resultType="adminQnaDto">
		select * from(
			select rownum rn, A.* from (
				select * from admin_qna 
				<choose>
					<when test='key == "admin_qna_title"'>
						where admin_qna_title like '%'||#{search}||'%' 
					</when>
					<when test='key == "admin_qna_head"'>
						where admin_qna_head like '%'||#{search}||'%' 
					</when>
				</choose>
				connect by prior admin_qna_no=super_no 
				start with super_no is null 
				order siblings by group_no desc, admin_qna_no asc
			)A
		) where rn between #{start} and #{finish}
	</select>
	
	<!-- 관리문의게시판 총 갯수 구하기 -->
	<select id="adminQnaCount" resultType="int">
		select count(*) from admin_qna
	</select>
	
	<!--  관리문의게시판 타이틀로 총 갯수 구하기 -->
	<select id="adminQnaTitleCount" parameterType="String" resultType="int">
		select count(*) from admin_qna where admin_qna_title like '%'||#{admin_qna_title}||'%'
	</select>
	
	<!--  관리문의게시판 헤드로 총 갯수 구하기 -->
	<select id="adminQnaHeadCount" parameterType="String" resultType="int">
		select count(*) from admin_qna where admin_qna_head like '%'||#{admin_qna_head}||'%'
	</select>
	
	<!-- 관리문의게시판 글 상세보기 1개 뽑기 -->
	<select id="adminQnaGetOne" parameterType="adminQnaDto" resultType="adminQnaDto">
		select * from admin_qna where admin_qna_no = #{admin_qna_no}
	</select>
	
	<!-- 관리문의게시판 새글쓰기 -->
	<insert id="adminQnaNewWrite" parameterType="adminQnaDto">
		insert into admin_qna(
			admin_qna_no,
			admin_no,
			admin_qna_content,
			admin_qna_title,
			admin_qna_writer,
			admin_qna_date,
			admin_qna_head,
			group_no,
			admin_qna_usertype
		) values(
			admin_qna_seq.nextval, 
			#{admin_no},
			#{admin_qna_content},
			#{admin_qna_title},
			#{admin_qna_writer},
			sysdate,
			#{admin_qna_head},
			admin_qna_seq.nextval,
			'관리자'
		)
	</insert>
	
	<!-- 관리문의게시판 답글쓰기 -->
	<insert id="adminQnaSecondWrite" parameterType="adminQnaDto">
		insert into admin_qna(
			admin_qna_no,
			<choose>
				<when test="member_no != 0">
					member_no,
				</when>
				<when test="seller_no != 0">
					seller_no,
				</when>
			</choose>
			admin_no,
			admin_qna_content,
			admin_qna_title,
			admin_qna_writer,
			admin_qna_date,
			admin_qna_head,
			group_no,
			super_no,
			admin_qna_usertype
		) values(
			admin_qna_seq.nextval, 
			<choose>
				<when test="member_no != 0">
					#{member_no},
				</when>
				<when test="seller_no != 0">
					#{seller_no},
				</when>
			</choose>
			#{admin_no},
			#{admin_qna_content},
			#{admin_qna_title},
			#{admin_qna_writer},
			sysdate,
			#{admin_qna_head},
			#{group_no},
			#{super_no},
			'관리자'
		)
	</insert>
	
	<!-- qna 글 수정 관리자용 -->
	<update id="qnaBoardUpdate"  parameterType="adminQnaDto">
		update admin_qna 
			set 
				admin_qna_title = #{admin_qna_title},
				admin_qna_content = #{admin_qna_content},
				admin_qna_date = sysdate
			where
				admin_qna_no = #{admin_qna_no}
	</update>
	
	<!-- qna글 삭제 -->
	<delete id="qnaBoardDelete" parameterType="adminQnaDto">
		delete admin_qna where admin_qna_no = #{admin_qna_no}
	</delete>
	
	<!-- 회원 개인 포인트 총합 -->
	<select id="pointSumMember" parameterType="point" resultType="int">
		select sum(member_point_change) from member_point where member_no = #{member_no}
	</select>
	
	<!-- 회원 개인 포인트 목록 갯수 구해오기 -->
	<select id="pointMemberCount" parameterType="point" resultType="int">
		select count(*) from member_point where member_no = #{member_no}
	</select>
	
	<!-- 회원 포인트 조회 --> 
	<select id="pointMember" parameterType="paging" resultType="point">
		select * from(
			select rownum rn, A.* from(
				select 
						*
				from 
						member_point
				where member_no = #{member_no}
				order by member_point_date
			)A
		)where rn between #{start} and #{finish}
	</select>
	
	<!-- 회원 포인트 삭제 -->
	<delete id="pointDelete" parameterType="int">
		delete member_point where member_point_no = #{member_point_no}
	</delete>
	
	<!-- 회원 포인트 추가 -->
	<insert id="pointRegist" parameterType="point">
		insert into member_point 
			values(
				member_point_seq.nextval, 
				#{member_point_status},
				sysdate,
				#{member_point_limit},
				#{member_point_change},
				#{member_point_content},
				#{member_no}
				)
	</insert>
	
	<!-- 회원 포인트 다중 -->
	<insert id="insertAll" parameterType="list">
		<foreach collection="list" item="point" index="index" open="insert all" close="select * from dual">
		 into member_point(
			member_point_no, member_point_status,
				member_point_date,
				member_point_limit,
				member_point_change,
				member_point_content,
				member_no
			 )
		  values(
		 	get_point_seq,
		 	'적립',
		 	sysdate,
		 	<choose>
		 		<when test="point.member_point_limit != ''">
				 	#{point.member_point_limit},
		 		</when>
		 		<otherwise>
		 			to_date(sysdate+30,'YYYY-MM-DD'),
		 		</otherwise>
		 	</choose>
		 	#{point.member_point_change},
		 	#{point.member_point_content},
		 	#{point.member_no}
		 )
		</foreach>
	</insert>
	
	<!-- resultMap을 써보자... -->
	<resultMap type="goodsVO" id="getGoodsVO">
		<result column="goods_no" property="goods_no"/>
		<result column="seller_no" property="seller_no"/>
		<result column="goods_name" property="goods_name"/>
		<result column="goods_price" property="goods_price"/>
		<result column="goods_discount_price" property="goods_discount_price"/>
		<result column="goods_discount_start" property="goods_discount_start"/>
		<result column="goods_discount_finish" property="goods_discount_finish"/>
		<result column="goods_stock" property="goods_stock"/>
		<result column="goods_status" property="goods_status"/>
		<result column="goods_content" property="goods_content"/>
		<result column="category_no" property="category_no"/>
	
		<collection property="goodsOptionList" 
						javaType="list"
						ofType="goodsOptionDto"
						select="getGoodsOption"
						column="goods_no"
						></collection>	
	</resultMap>
	
		<!-- 그냥 상품 불러오기 -->
		<select id="goodsList" parameterType="paging" resultType="goodsCategoryVO">
		select * from(
			select rownum rn, A.* from(
				select d.*, c.seller_id, c.seller_name, c.seller_email, c.seller_phone, 
				c.seller_birth, c.seller_addr_post, c.seller_addr_basic, c.seller_addr_extra, c.seller_store_name
				, c.seller_store_phone, c.seller_store_fax, c.seller_grade
				from seller c right outer join 
				(select a.*, b.category_large, b.category_middle, 
				b.category_small from goods a left outer join category b on a.category_no = b.category_no) 
				d on c.seller_no = d.seller_no
				<choose>
					<when test='key == "goods_name"'>
						where goods_name like '%'||#{search}||'%' 
					</when>
					<when test='key == "seller_id"'>
						where seller_id like '%'||#{search}||'%' 
					</when>
				</choose>
				order by d.goods_no
			)A
		)where rn between #{start} and #{finish}
		
		
		</select>
		
		<!-- 그냥 상품 카운트 구하기 -->
		<select id="goodsCount" resultType="int">
		select count(*)
			from seller c right outer join 
				(select * from goods a left outer join category b on a.category_no = b.category_no) 
				d on c.seller_no = d.seller_no
		</select>
		
		<!-- 상품 이름으로 카운트 구하기 -->
		<select id="goodsNameCount" parameterType="String" resultType="int">
		select count(*)
			from seller c right outer join 
				(select * from goods a left outer join category b on a.category_no = b.category_no) 
				d on c.seller_no = d.seller_no 
			where goods_name like '%'||#{goods_name}||'%'
		</select>
		<!-- 판매자 아이디로 카운트 구하기 -->
			<select id="goodsIdCount" parameterType="String" resultType="int">
		select count(*)
			from seller c right outer join 
				(select * from goods a left outer join category b on a.category_no = b.category_no) 
				d on c.seller_no = d.seller_no 
			where seller_id like '%'||#{seller_id}||'%'
		</select>
		
		
		<!-- 상품 삭제 -->
		<delete id="goodsDelete" parameterType="goodsVO">
			delete goods where goods_no = #{goods_no}
		</delete>
		
	<!-- resultMap사용해 상품 불러오기 -->
		<select id="getGoodsVO" parameterType="int"  resultMap="getGoodsVO">
			select * from goods where goods_no = #{goods_no}
		</select>
	
		<select id="getGoodsOption" parameterType="int" resultType="goodsOptionDto">
			select * from goods_option where goods_no = #{goods_no}
		</select>
		
	<!-- 회원 및 판매자 차단하기 -->
		<insert id="block" parameterType="blockDto">
			insert into 
				block(
					block_no,
					block_content,
					block_id,
					block_group,
					block_date,
					<choose>
						<when test="member_no !=0">
						member_no
						</when>
						<otherwise>
						seller_no
						</otherwise>
					</choose>
				) 
			values(
				block_seq.nextval,
				#{block_content},
				#{block_id},
				#{block_group},
				sysdate,
				<choose>
					<when test="member_no != 0">
						#{member_no}
					</when>
					<otherwise>
						#{seller_no}
					</otherwise>
				</choose>
				
						)
		</insert>
	
	<!-- 차단된 회원 목록 불러오기 -->
	<select id="blockList" parameterType="paging" resultType="blockDto">
		select * from(
			select rownum rn, A.* from(
				select * from block
				<choose>
					<when test='key == "block_group"'>
						where block_group like '%'||#{search}||'%' 
					</when>
					<when test='key == "block_id"'>
						where block_id like '%'||#{search}||'%' 
					</when>
				</choose>
				order by block_no desc
			)A
		)where rn between #{start} and #{finish}
	</select>
	
	<!-- 차단 회원 목록 총 수 -->
	<select id="blockCount" resultType="int">
		select count(*) from block
	</select>
	
	<!-- 차단 회원 블록 그룹으로 계산 -->
	<select id="blockGroupCount" parameterType="String" resultType="int">
		select count(*) from block where block_group like '%'||#{block_group}||'%'
	</select>
	<!-- 차단 회원 블록 아이디로 계산 -->
	<select id="blockIdCount" parameterType="String" resultType="int">
		select count(*) from block where block_id like '%'||#{block_id}||'%'
	</select>
	
	<!-- 차단 해제 -->
	<delete id="blockDelete" parameterType="blockDto">
		delete block where block_no = #{block_no}
	</delete>
	
	<!-- 차단 해제 판매자버전 -->
	<select id="blockDeleteSeller" parameterType="blockDto" >
		delete block where seller_no = #{seller_no}
	</select>
	
	<!-- 차단 해제 회원버전 -->
	<select id="blockDeleteMember" parameterType="blockDto" >
		delete block where member_no = #{member_no}
	</select>
	
	<!-- 일일 접속자 차트 목록 구해오기 -->
	<select id="userDaily" resultType="connectList">
		select * from connecting order by daily asc
	</select>
	
	<!-- 상품 review 불러오기 상품별 -->
	<select id="reviewList" parameterType="int" resultType="review">
		select distinct
				a.*, b.goods_review_reply_writer, b.goods_review_reply_content, b.goods_review_reply_date, b.goods_review_reply_no 
			from goods_review a 
        		inner join goods_review_reply b 
       			 on a.goods_review_no = b.goods_review_no where a.goods_no = #{goods_no}
	</select>
	
	<!-- 회원 등급 혜택 -->
	<insert id="gradeBenefitRegist"  parameterType="gradeBenefitDto"   >
		insert into grade_benefit values(grade_benefit_seq.nextval, #{grade_benefit_grade}, #{grade_benefit_rate})
	</insert>
	
	<!-- 회원 등급 혜택 리스트  -->
	<select id="gradeBenefitList" resultType="gradeBenefitDto">
		select * from grade_benefit order by grade_benefit_rate asc
	</select>
	
	<!-- 회원 등급 혜택 수정 -->
	<update id="gradeBenefitUpdate" parameterType="gradeBenefitDto">
		update grade_benefit 
			set 
				grade_benefit_grade = #{grade_benefit_grade}, 
				grade_benefit_rate = #{grade_benefit_rate}
			where grade_benefit_no = #{grade_benefit_no}
	</update>
	
	<!-- 회원 등급 혜택 삭제 -->
	<delete id="gradeBenefitDelete" parameterType="gradeBenefitDto">
		delete grade_benefit where grade_benefit_no = #{grade_benefit_no}
	</delete>
	
	<!-- 오늘의 판매 금액 전체 -->
	<select id="dailySale" resultType="result">
		select sum(total_amount) result from ordering 
			where 
				to_char(process_time, 'YYYY-MM-DD') 
				= 
				to_char(sysdate, 'YYYY-MM-DD')
			and 
				ordering_status = '결제완료'
	</select>
	
	<!-- 오늘의 취소 금액 전체 -->
	<select id="dailyCancel" resultType="result">
		select sum(total_amount) result from ordering 
			where 
				to_char(process_time, 'YYYY-MM-DD') 
				= 
				to_char(sysdate, 'YYYY-MM-DD')
			and 
				ordering_status = '결제취소'
	</select>
	
	<!-- 오늘의 판매 횟수 -->
	<select id="todaySaleCount" resultType="result">
		select count(*) result from ordering 
			where 
				to_char(process_time, 'YYYY-MM-DD') 
				= 
				to_char(sysdate, 'YYYY-MM-DD')
			and 
				ordering_status = '결제완료'
	</select>
	
	<!-- 이번달 판매 금액 -->
	<select id="thisMonthSalePrice" resultType="result">
		select sum(total_amount) result 
		    from ordering 
		    where ordering_status='결제완료' 
		    and 
		    	(to_char(process_time, 'YYYY-MM-DD') 
			    between trunc(sysdate, 'MM') 
			    and 
			    last_day(sysdate))
	</select>
	
	<!-- 이번달 취소 금액 -->
	<select id="thisMonthCancel" resultType="result">
		select sum(total_amount) result 
		    from ordering 
		    where ordering_status='결제취소' 
		    and 
		    	(to_char(process_time, 'YYYY-MM-DD') 
			    between trunc(sysdate, 'MM') 
			    and 
			    last_day(sysdate))
	</select>
	
	<!-- 이번달 판매 총 횟수 -->
	<select id="thisMonthSaleCount" resultType="result">
	select count(total_amount) result
    from ordering 
    where 
    	ordering_status='결제완료' 
    and 
    (to_char(process_time, 'YYYY-MM-DD') 
    	between trunc(sysdate, 'MM') 
    	and last_day(sysdate))
	</select>
	
	<!-- 이번주 판매 총 금액 -->
	<select id="thisWeekSalePrice" resultType="result">
		select sum(total_amount) result
		    from ordering 
		    where ordering_status='결제완료' 
		    and 
		    (to_char(process_time, 'YYYY-MM-DD') 
		    between trunc(sysdate, 'iw') 
		    and trunc(sysdate+7, 'dy'))
	</select>
	
	<!-- 이번주 취소금액 -->
	<select id="thisWeekCancel" resultType="result">
		select sum(total_amount) result
		    from ordering 
		    where ordering_status='결제취소' 
		    and 
		    (to_char(process_time, 'YYYY-MM-DD') 
		    between trunc(sysdate, 'iw') 
		    and trunc(sysdate+7, 'dy'))
	</select>
	
	<!-- 이번주 판매 총 횟수 -->
	<select id="thisWeekSaleCount" resultType="result">
		select count(total_amount) result
		    from ordering 
		    where ordering_status='결제완료' 
		    and 
		    (to_char(process_time, 'YYYY-MM-DD') 
		    between trunc(sysdate, 'iw') 
		    and trunc(sysdate+7, 'dy'))
	</select>
	
	<!-- 월별 판매 금액 -->
	<select id="monthlySalePrice" resultType="MonthlySalePriceVO">
		select 
			sum(total_amount) total_amount,
			to_char(process_time, 'YYYY-MM-DD') process_time 
		from 
			ordering where ordering_status = '결제완료'
			group by to_char(process_time,'YYYY-MM-DD')
			order by process_time asc
	</select>
	
	
	<!-- 프리미엄 전체 불러오기 -->
	<select id="getPremium" resultType="premiumDto">
		select * from premium order by premium_price desc
	</select>
	
	<!-- 프리미엄 계산하기 -->
	<select id="calculratePremium" parameterType="int" resultType="int">
		select min(premium_rate) from premium where premium_price <![CDATA[<=]]> #{price}
	</select>
	
	<!-- 많이 팔린 상품 탑텐 이름 -->
	<select id="goodsTopTen" resultType="topTen">
		select * from(
			select goods_name item, sum(cart_info_goods_quantity)result from cart_info_goods CIG
			    inner join goods GD on CIG.goods_no = GD.goods_no group by goods_name order by sum(cart_info_goods_quantity) desc)
			    where rownum <![CDATA[<=]]> 10
	</select>
		
	<!-- 판매 금액 높은 상품 탑텐 이름 -->
	<select id="priceTopTen" resultType="topTen">
		select * from(
			select goods_name item, sum(cart_info_goods_price * cart_info_goods_quantity)result from cart_info_goods CIG 
			    inner join goods G on CIG.goods_no = G.goods_no
			    group by goods_name
			    order by sum(cart_info_goods_price * cart_info_goods_quantity) desc)
			    where rownum <![CDATA[<=]]> 10
	</select>
	
	<!-- 많이 판 판매자 탑텐 이름 -->
	<select id="sellerTopTen" resultType="topTen">
		select * from (
			select S.seller_id item, sum(CIG.cart_info_goods_quantity)result from cart_info_goods CIG
			    inner join goods GD on CIG.goods_no = GD.goods_no
			    inner join seller S on GD.seller_no = S.seller_no
			    group by S.seller_id
			    order by sum(CIG.cart_info_goods_quantity)desc)
			    where rownum <![CDATA[<=]]> 10
	</select>
	
	<!-- 정산 받을 사람 뽑아오기 -->
	<select id="adjustmentGetSeller" parameterType="paging" resultType="String">
		select A.seller_id from(
			select rownum rn, A.* from(
					select  S.seller_id
			    from ordering O 
			        left outer join cart_info CI on O.partner_order_id = ci.partner_order_id
			        left outer join cart_info_goods CIG on CI.cart_info_no = CIG.cart_info_no
			        left outer join goods GD on cig.goods_no = GD.goods_no
			        left outer join seller S on GD.seller_no = S.seller_no
			       	left outer join member M on CI.member_no = M.member_no
			   
			  	  where O.ordering_status != '결제준비완료'
			           <choose>
			           		<when test="seller_id != null">
					         and 	seller_id like '%'||#{seller_id}||'%'
			           		</when>
			           		<otherwise>
			           		</otherwise>
			           </choose>
			            and extract(year from process_time) = #{year}
			                and 
			                extract(month from process_time) = #{month}
			                group by S.seller_id
			            order by S.seller_id asc
			)A
		) A where rn between #{start} and #{finish}
		
	</select>
	
	<!-- 정산 계산 -->
	<select id="adjustment" parameterType="paging" resultType="adjustmentFullVO">
		select O.partner_order_id, O.ordering_status, O.process_time,O.total_amount, CI.total_delivery_price, 
				 CIG.cart_info_goods_quantity, CIG.cart_info_goods_price, GD.goods_name, S.seller_id, S.seller_name, S.seller_email, S.seller_phone,
				 S.seller_store_name, S.seller_store_phone, S.seller_bank_code, S.seller_bank_account, S.seller_bank_username, M.member_id
		    from ordering O 
		        inner join cart_info CI on O.partner_order_id = ci.partner_order_id
		        inner join cart_info_goods CIG on CI.cart_info_no = CIG.cart_info_no
		        inner join goods GD on cig.goods_no = GD.goods_no
		        inner join seller S on GD.seller_no = S.seller_no
		        inner join member M on CI.member_no = M.member_no
		   
		    where O.ordering_status != '결제준비완료'
		            <choose>
		            	<when test="seller_id!=null">
		            and S.seller_id = #{seller_id}
		            	</when>
		            	<when test="year!=null">
		            and extract(year from process_time) = #{year}
		            	</when>
		            	<when test="month!=null">
		                and 
		                extract(month from process_time) = #{month}
		            	</when>
		            	<otherwise>
		            	</otherwise>
		            </choose>
            order by S.seller_id asc, O.partner_order_id asc, O.process_time asc
	</select>
	
	<!-- 수수료 구하기 -->
	<select id="getRate" parameterType="int" resultType="int">
		select min(premium_rate) from premium where premium_price <![CDATA[<=]]> #{price}
	</select>
	
	<!-- 정산 받을 사람 뽑아오기 -->
	<select id="adjustmentCount" parameterType="paging" resultType="String">
					select  S.seller_id
			    from ordering O 
			        left outer join cart_info CI on O.partner_order_id = ci.partner_order_id
			        left outer join cart_info_goods CIG on CI.cart_info_no = CIG.cart_info_no
			        left outer join goods GD on cig.goods_no = GD.goods_no
			        left outer join seller S on GD.seller_no = S.seller_no
			        left outer join member M on CI.member_no = M.member_no
			   
			  	  where O.ordering_status != '결제준비완료'
			           <choose>
			           		<when test="seller_id != null">
					         and 	seller_id like '%'||#{seller_id}||'%'
			           		</when>
			           		<otherwise>
			           		</otherwise>
			           </choose>
			            and extract(year from process_time) = #{year}
			                and 
			                extract(month from process_time) = #{month}
			                group by S.seller_id
			            order by S.seller_id asc
		
	</select>
	
	<!-- 한명 계산하기 -->
	<select id="adjustmentOne" parameterType="paging" resultType="adjustmentFullVO">
		select A.* from(
			select rownum rn, A.* from(
					select O.partner_order_id, O.ordering_status, O.process_time,O.total_amount, CI.total_delivery_price, 
					 CIG.cart_info_goods_quantity, CIG.cart_info_goods_price, GD.goods_name, S.seller_id, S.seller_name, S.seller_email, S.seller_phone,
					 S.seller_store_name, S.seller_store_phone, S.seller_bank_code, S.seller_bank_account, S.seller_bank_username, M.member_id
			    from ordering O 
			        left outer join cart_info CI on O.partner_order_id = ci.partner_order_id
			        left outer join cart_info_goods CIG on CI.cart_info_no = CIG.cart_info_no
			        left outer join goods GD on cig.goods_no = GD.goods_no
			        left outer join seller S on GD.seller_no = S.seller_no
			        left outer join member M on CI.member_no = M.member_no
			   
			    where O.ordering_status != '결제준비완료'
			            and S.seller_id = #{seller_id}
			            and extract(year from process_time) = #{year}
			                and 
			                extract(month from process_time) = #{month}
	            order by S.seller_id asc, O.partner_order_id asc, O.process_time asc
			)A
		) A where rn between #{start} and #{finish}
	</select>
	
	<!-- 한명의 판매자 목록 총 카운트 구하기 -->
	<select id="adjustmentOneCount" parameterType="adjustmentInsertVO" resultType="int">
		select count(*)
			    from ordering O 
			        left outer join cart_info CI on O.partner_order_id = ci.partner_order_id
			        left outer join cart_info_goods CIG on CI.cart_info_no = CIG.cart_info_no
			        left outer join goods GD on cig.goods_no = GD.goods_no
			        left outer join seller S on GD.seller_no = S.seller_no
			        left outer join member M on CI.member_no = M.member_no
			   
			    where O.ordering_status != '결제준비완료'
			            and S.seller_id = #{seller_id}
			            and extract(year from process_time) = #{year}
			                and 
			                extract(month from process_time) = #{month}
            order by S.seller_id asc, O.partner_order_id asc, O.process_time asc          
	</select>
  
	<!-- 스케쥴러를 통해 정산할 것 구해오기 -->
	<select id="scheduleCalculate" parameterType="string" resultType="adjustmentFullVO">
		select O.ordering_status, CI.total_delivery_price, 
			 CIG.cart_info_goods_quantity, CIG.cart_info_goods_price, S.seller_id, S.seller_no 
			    from ordering O 
			        inner join cart_info CI on O.partner_order_id = ci.partner_order_id
			        inner join cart_info_goods CIG on CI.cart_info_no = CIG.cart_info_no
			        inner join goods GD on cig.goods_no = GD.goods_no
			        inner join seller S on GD.seller_no = S.seller_no
			        inner join member M on CI.member_no = M.member_no
			   
			    where O.ordering_status != '결제준비완료'
			    		and S.seller_id=#{seller_id}
			            and O.process_time between
			               TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1)+1)-TO_CHAR(SYSDATE,'DD'),'YYYY-MM-DD')
			                and
			               TO_CHAR(TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1)))+0.99999421,'YYYY-MM-DD')
			            order by S.seller_id asc, O.partner_order_id asc, O.process_time asc
	</select>
	
	<!-- 정산 테이블에 넣기 인설트 -->
	<insert id="scheduleCalculateInsert" parameterType="calculateDto">
		insert into calculate values(calculate_seq.nextval, 
				TO_CHAR(TRUNC(ADD_MONTHS(SYSDATE,-1)+1)-TO_CHAR(SYSDATE,'DD'),'YYYY-MM-DD'), 
            	TO_CHAR(TRUNC(LAST_DAY(ADD_MONTHS(SYSDATE, -1)))+0.99999421,'YYYY-MM-DD'),
           		 to_char(sysdate, 'YYYY-MM-DD'),
           		 '정산완료',
           		 #{calculate_total},
           		 #{calculate_exception},
           		 #{calculate_final},
           		 #{seller_id},
           		 #{seller_no}
           		 )
	</insert>
	
	<!--  스케쥴러 정산을 위한 아이디 가져오기-->
	<select id="scheduleCalculateGetSeller" resultType="string">
		select S.seller_id
			    from ordering O 
			        left outer join cart_info CI on O.partner_order_id = ci.partner_order_id
			        left outer join cart_info_goods CIG on CI.cart_info_no = CIG.cart_info_no
			        left outer join goods GD on cig.goods_no = GD.goods_no
			        inner join seller S on GD.seller_no = S.seller_no
			        left outer join member M on CI.member_no = M.member_no
   
    		where O.ordering_status != '결제준비완료'
          
	            and O.process_time between
	                trunc(sysdate, 'MM')
	                and
	                last_day(trunc(sysdate, 'MM'))
	            group by S.seller_id
	</select>
	
	<!-- 상품 파일사진 불러오기 -->
	<select id="getGoodsFiles" parameterType="int" resultType="Files">
		select F.* from files F
		    inner join files_goods FG on F.files_no = FG.files_no
		    inner join goods G on FG.goods_no = G.goods_no
		    where G.goods_no = #{goods_no}
	</select>
	
	<!-- 파일 번호로 파일 정보가져오기 -->
	<select id="getFile" parameterType="int" resultType="Files">
		select F.* from files F  
		    where F.files_no = #{files_no}
	</select>
	
	<!-- 주문제작 파일 사진 불러오기 -->
	<select id="getCustomOrderFiles" parameterType="int" resultType="Files">
		select F.*, CO.custom_order_no from files F
		    inner join files_custom_order FCO on F.files_no = fco.files_no
		    inner join custom_order CO on fco.custom_order_no = co.custom_order_no
		    where CO.custom_order_no = #{custom_order_no}
	</select>
	
	<!-- 주문제작 리스트 가져오기 -->
	<select id="getCustomOrderList" parameterType="paging" resultType="customOrderVO">
		select * from(
			select rownum rn, A.* from(
		
		select CO.*, M.member_id, S.seller_id, c.category_large, c.category_middle, c.category_small from custom_order CO
		    left outer join member_custom_order MCO on co.custom_order_no = mco.custom_order_no
		    left outer join seller_custom_order SCO on co.custom_order_no = sco.custom_order_no
		    left outer join member M on mco.member_no = m.member_no
		    left outer join seller S on sco.seller_no = S.seller_no
		    left outer join category C on co.custom_order_category = c.category_no
		    <choose>
		    	<when test="key == 'custom_order_type'">
		    		where custom_order_type like '%'||#{search}||'%'
		    	</when>
		    	<when test="key == 'id'">
		    		where member_id like '%'||#{search}||'%' or seller_id like '%'||#{search}||'%'
		    	</when>
		    	<when test="key == 'custom_order_status'">
		    		where custom_order_status like '%'||#{search}||'%'
		    	</when>
		    	<otherwise></otherwise>
		    </choose>
		    order by co.custom_order_date desc
		    
		    			)A
		)where rn between #{start} and #{finish}
	</select>
	
	<!-- 주문제작 리스트 카운트 -->
	<select id="getCustomOrderCount" parameterType="paging" resultType="int">
		select count(*) from custom_order CO
		    left outer join member_custom_order MCO on co.custom_order_no = mco.custom_order_no
		    left outer join seller_custom_order SCO on co.custom_order_no = sco.custom_order_no
		    left outer join member M on mco.member_no = m.member_no
		    left outer join seller S on sco.seller_no = S.seller_no
		    left outer join category C on co.custom_order_category = c.category_no
		    <choose>
		    	<when test="key == 'custom_order_type'">
		    		where custom_order_type like '%'||#{search}||'%'
		    	</when>
		    	<when test="key == 'id'">
		    		where member_id like '%'||#{search}||'%' or seller_id like '%'||#{search}||'%'
		    	</when>
		    	<when test="key == 'custom_order_status'">
		    		where custom_order_status like '%'||#{search}||'%'
		    	</when>
		    	<otherwise></otherwise>
		    </choose>
	</select>
	
	<!-- 주문제작 한개 불러오기 -->
	<select id="getCustomOrderOne" parameterType="int" resultType="customOrderVO">
		select CO.*, M.member_id, S.seller_id, c.category_large, c.category_middle, c.category_small from custom_order CO
		    left outer join member_custom_order MCO on co.custom_order_no = mco.custom_order_no
		    left outer join seller_custom_order SCO on co.custom_order_no = sco.custom_order_no
		    left outer join member M on mco.member_no = m.member_no
		    left outer join seller S on sco.seller_no = S.seller_no
		    left outer join category C on co.custom_order_category = c.category_no
		where CO.custom_order_no = #{custom_order_no}
	</select>
	
	<!-- 회사 정보 불러오기 -->
	<select id="getCompanyInfo" resultType="companyInfoDto">
		select * from companyinfo
	</select>
	
	<!-- 회사 정보 수정하기 -->
	<update id="updateCompanyInfo" parameterType="companyInfoDto">
		update companyinfo
			set
			co_name = #{co_name},
			co_ceo = #{co_ceo},
			co_location = #{co_location},
			co_call = #{co_call},
			co_email = #{co_email},
			co_termsofuse = #{co_termsofuse},
			co_privacy = #{co_privacy}
	</update>
 </mapper> 
	
 