<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 명령을 전달하기 위한 파일 namespace : 영역을 부르는 별칭 parameterType : 이 명령을 실행하기 위해 
	필요한 데이터의 형태 resultType : 기대되는 결과물의 형태 (목록이든 아니든 dto 형태로 표기) 부등호(<,>,=)를 쓰고 
	싶다면 <![CDATA[ 이곳에 명령어를 넣는다 ]]> 형태에 따라 파라미터를 다르게 설정할 수 있다 - #은 형태를 추론해 자동으로 
	따옴표 설정 및 인코딩 처리를 수행 - $는 값을 있는 그대로 출력하는 명령이므로 주로 "항목"에 사용 -$의 경우 SQL Injection 
	이라는 해킹 공격에 매우 취약하므로 사용에 주의 -->
<mapper namespace="seller"> <!-- 이건 꼭 있어야한다 -->
	<!-- 회원가입 구문 -->
	<insert id="regist" parameterType="seller">
		insert into seller(
		seller_no, seller_id, seller_pw, seller_name, seller_email, seller_phone,
		seller_birth, seller_addr_post, seller_addr_basic, seller_addr_extra,
		seller_store_name, seller_store_phone, seller_store_fax,
		seller_agree_date, seller_cid, seller_bank_code, seller_bank_account,
		seller_bank_username,seller_bank_birth, seller_grade
		)
		values(
		#{seller_no}, #{seller_id}, #{seller_pw}, #{seller_name},
		#{seller_email}, #{seller_phone}, #{seller_birth}, #{seller_addr_post},
		#{seller_addr_basic}, #{seller_addr_extra}, #{seller_store_name},
		#{seller_store_phone},#{seller_store_fax},
		to_date(sysdate, 'yyyy-mm-dd hh24:mi:ss' ),
		'cid', #{seller_bank_code}, #{seller_bank_account},
		#{seller_bank_username}, #{seller_bank_birth},
		'브론즈'
		)
	</insert>
	<!-- 아이디 중복검사 -->
	<select id="id_check"  parameterType="string" resultType="int">
		select count(*) from seller where seller_id =#{seller_id}
		</select>
	
	
	<!-- seller_no 시퀀스 주기 -->
	<select id="sequence" resultType="int">
		select seller_seq.nextval from dual
	</select>
	<!-- seller_cid를 seller_no로 쓰겠다 -->
	<!-- <select id="seller_cid" resultType="int"> -->
	<!-- select seller_cid -->
	<!-- </select> -->

	<!-- 판매자 로그인 구문 -->
	<!-- 비밀번호 암호화 -->
	<select id="login" parameterType="seller" resultType="seller">
		select * from seller where seller_id =#{seller_id}
	</select>
	<!-- 판매자 아이디 찾기 -->
	<select id="find_id" parameterType="seller" resultType="seller">
		select  seller_id from seller where seller_name=#{seller_name} 
		and seller_email=#{seller_email}
	</select>
	
	<!-- 판매자 정보 조회 -->
	<select id="info" parameterType="seller" resultType="seller">
		select * from seller where seller_id=#{seller_id}
	</select>
	
	<!-- 판매자 정보 수정 -->

	<update id="info_edit" parameterType="seller">
		update seller set seller_email=#{seller_email},seller_phone=#{seller_phone}, 
		 						   seller_store_phone=#{seller_store_phone},
		 						   seller_store_fax=#{seller_store_fax},
		 						   seller_bank_code=#{seller_bank_code}, 
								   seller_bank_account=#{seller_bank_account},
								   seller_bank_username=#{seller_bank_username},
								   seller_bank_birth=#{seller_bank_birth}
								   where seller_id =#{seller_id}
		</update>
		<!-- 비밀번호 수정 -->
		<update id="change_pw" parameterType="seller">
						update seller set seller_pw=#{seller_pw} where seller_id=#{seller_id} 
						
		</update>
		
			<!-- 판매자 회원탈퇴 -->
			<delete id="delete" parameterType="seller">
			delete seller where seller_id=#{seller_id} 
			</delete>



<!-- 판매자 No 단일조회 -->
	<select id="getSeller" parameterType="int" resultType="seller">
		select *from seller where seller_no=#{seller_no}
	</select>

<!-- 	<update id="info_edit" parameterMap="seller"> -->
<!-- 		update seller set #{seller_email}, #{seller_phone}, #{seller_store_phone}, -->
<!-- 		#{seller_store_fax}, 'cid', #{seller_bank_code}, -->
<!-- 		#{seller_bank_account}, -->
<!-- 		#{seller_bank_username}, #{seller_bank_birth} -->
<!-- 		where seller_id =#{seller_id} -->
<!-- 	</update> -->

  <!-- session id로 판매자 번호 구하기-->
 	<select id="getNo" parameterType="String" resultType="int">
 		select seller_no from seller where seller_id = #{seller_id}
 	</select>
 	
 <!-- 비밀번호 찾기 로그인 -->
	<select id="emaillogin" parameterType="seller" resultType="seller">
			select * from seller where seller_id = #{seller_id}
	</select>	

 <!-- 판매자 견적서 sql -->
 
 	<!-- 견적서 작성 -->
	<insert id="customResp" parameterType="customOrderDto">
		insert into custom_order
		(custom_order_no,
		custom_order_title, custom_order_content, custom_order_date,
		custom_order_price, custom_order_hopedate,
		custom_order_status, custom_order_type,custom_order_category)
		values(custom_order_seq.nextval,
		#{custom_order_title}, #{custom_order_content}, sysdate,
		#{custom_order_price}, #{custom_order_hopedate},
		'견적대기', '견적서',#{custom_order_category})
	</insert>	
	<!-- 주문제작 테이블 현재 시퀀스번호 -->
	<select id="customSeq" resultType="int">
		select
		custom_order_seq.currval from dual
	</select>

	<!-- 견적서 관리 테이블 -->
	<insert id="customInsert" parameterType="sellerCustomDto">
		insert into seller_custom_order
					values(seller_custom_order_seq.nextval,#{custom_order_no},#{seller_no})
	</insert>
	<!-- 견적서 관리테이블 현재 시퀀스번호 -->
	<select id="customOrderSeq" resultType="int">
		select seller_custom_order_seq.currval from dual
	</select>
	
	<!-- 요청서 도착 알람 -->
	<insert id="insertAlarm" parameterType="sellerAlarmDto">
		insert into seller_alarm(seller_alarm_no, seller_no,
													member_custom_order_no,
													seller_alarm_check, seller_alarm_delete)
							values(seller_alarm_seq.nextval, #{seller_no},
										#{member_custom_order_no},
										'N', 'N')
	</insert>
	
	<select id="getAlarm" parameterType="int" resultType="SellerAlarmDto">
		select *from seller_alarm where member_custom_order_no=#{member_custom_order_no}
	</select>
	<!-- 견적서관리테이블 단일조회 -->
	<select id="getSellerCustom" parameterType="int" resultType="sellerCustomDto">
		select *from seller_custom_order where seller_custom_order_no=#{seller_custom_order_no}
	</select>
		
	<!-- 판매자가 받은 요청서 총 개수(목적: 페이징) -->
	<select id="customCountTest" parameterType="int" resultType="int">
		select count(*) from seller_alarm where seller_no = #{seller_no} and seller_alarm_delete='N'
	</select>
	<!-- 나에게 온 요청서 보기 -->
	<select id="getListReq" parameterType="int" resultType="customOrderVO">
		select *from(
		    select rownum rn, RN.*from(
		        select A.*, B.member_id from
		            member_custom_view A inner join member B
		                on A.member_no = B.member_no
		        where seller_no = #{seller_no} and  seller_alarm_delete='N' order by a.custom_order_no desc
		    )RN 
 		)where rn between #{start} and #{finish} 
	</select>	
	
	<!-- 요청서 상세내용 보기. 단일조회 -->
	<select id="getListInfoReq" parameterType="int" resultType="customOrderVO">
		select A.*, B.member_id from
		    member_custom_view A inner join member B
		        on a.member_no = B.member_no
		where A.member_custom_order_no = #{member_custom_order_no} and A.seller_no=#{seller_no}
	</select>
	<!-- 요청서 파일 데이터 출력 -->
	<select id="getListReqFiles" parameterType="int" resultType="com.kh.ordering.entity.FilesDto">
		select a.* from
		    files A inner join files_custom_order B
		        on a.files_no = b.files_no
		    inner join member_custom_order C
		        on b.custom_order_no = c.custom_order_no
		where a.files_size>0 and c.member_custom_order_no=#{member_custom_order_no}
	</select>
		
	<!-- 요청서 상세보기 클릭하면 판매자 알람테이블/요청서관리상태 업데이트 -->
	<update id="updateAlarm" parameterType="sellerAlarmDto">
		update seller_alarm set seller_alarm_date=sysdate, seller_alarm_check='Y'
   			where seller_no=#{seller_no} and member_custom_order_no=#{member_custom_order_no}
	</update>
	<update id="updateCustomStatus" parameterType="customOrderDto">
		update custom_order
			set custom_order_date=sysdate, custom_order_status=#{custom_order_status} where custom_order_no=#{custom_order_no}
	</update>
	
	<!-- 판매자 알람테이블 check N 상태 count (새 요청서 개수에 활용) -->
	<select id="customCheck" resultType="int">
		select count(*) from seller_alarm where seller_alarm_check='N' and seller_alarm_delete='N' and seller_no=#{seller_no}
	</select>

	<!-- 판매자가 보낸 견적서 총 개수(목적:페이징) -->
	<select id="customRespCount" parameterType="int" resultType="int">
		select count(*) from seller_custom_order where seller_no=#{seller_no}
	</select>
	
	<!-- 요청서 삭제: status Y, delete상태 Y(구매자가 삭제할 수 있도록) -->
	<select id="getAlarmNo" parameterType="sellerAlarmDto" resultType="int">
		select seller_alarm_no from seller_alarm
			where seller_no=#{seller_no} and member_custom_order_no=#{member_custom_order_no}
	</select>
	<update id="updateAlarmDelete">
		update seller_alarm set seller_alarm_check = 'N', seller_alarm_delete = 'Y'
			where seller_alarm_no = #{seller_alarm_no}
	</update>
	
<!-- 내가 보낸 견적서 목록 / 상세보기 -->
	<select id="getListResp" parameterType="pagingVO" resultType="CustomOrderVO">
		select *from(
		    select rownum rn, RN.*from(
		        select A.*, B.seller_no, b.seller_custom_order_no from
		            custom_order A inner join seller_custom_order B
		                on a.custom_order_no = b.custom_order_no 
		        	where seller_no = #{seller_no} order by a.custom_order_no desc
		    )RN
		)where rn between #{start} and #{finish}
	</select>
	<select id="getListInfoResp" parameterType="int" resultType="customOrderVO">
		select A.*, B.seller_no, b.seller_custom_order_no from
		    custom_order A inner join seller_custom_order B
		        on a.custom_order_no = b.custom_order_no
		where b.seller_custom_order_no =#{seller_custom_order_no}
	</select>
	<!-- 내가 보낸 견적서에 대한 파일 no -->
	<select id="getRespFilesNo" parameterType="int" resultType="FilesVO">
		select b.* from
		    files A inner join files_custom_order B
		        on a.files_no = b.files_no
		    inner join seller_custom_order C
		        on b.custom_order_no = c.custom_order_no
		where c.seller_custom_order_no=#{seller_custom_order_no}
	</select>

	<select id="getSellerNo" parameterType="String" resultType="int">
		select seller_no from seller where seller_id = #{seller_id}
	</select>

	<!-- 보낸 견적서 수정 -->
	<update id="updateCustom" parameterType="customOrderDto">
		update custom_order set custom_order_title=#{custom_order_title},
							                        custom_order_content=#{custom_order_content},
							                        custom_order_price=#{custom_order_price},
							                        custom_order_hopedate=#{custom_order_hopedate},
							                        custom_order_date=sysdate
                where custom_order_no=#{custom_order_no}
	</update>
	<!-- 보낸 견적서 삭제 -->
	<select id="getCustomNo" parameterType="int" resultType="int">
		select custom_order_no from seller_custom_view
			where member_alarm_check='N' and seller_custom_order_no=#{seller_custom_order_no}
	</select>
	<delete id="deleteResp" parameterType="sellerCustomDto">
		delete from custom_order A
		    where A.custom_order_no
		        IN (select custom_order.custom_order_no
		                from custom_order inner join seller_custom_order
		                    on seller_custom_order.custom_order_no = custom_order.custom_order_no
		                where seller_no=#{seller_no} and seller_custom_order_no=#{seller_custom_order_no} and custom_order_status='견적대기')
	</delete>
	<delete id="deleteAlarm" parameterType="int">
		delete member_alarm where seller_custom_order_no= #{seller_custom_order_no}
	</delete>	
   

	
 </mapper>

